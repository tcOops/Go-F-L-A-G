Logger
sqlSessionFactory是一个已有的模块，　用来提供数据库连接

搞成Factory模式，　工厂模式的好处嘛：解耦
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜
如果有许多地方都需要生成A的对象，那么你需要写很多A  a=new A（）。
如果需要修改的话，你要修改许多地方。
但是如果用工厂模式，你只需要修改工厂代码。其他地方引用工厂，可以做到只修改一个地方，其他代码都不动，就是解耦了。
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜

JAVA-Object的Object常用方法类：
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜
http://eric-619.iteye.com/blog/693185
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜

访问控制权限狗：
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜
va的访问权限有四种，public，protected，默认，private

其中，默认访问权限是指没有指定访问权限的情况时的访问权限。此时定义的变量和方法，或者类 可以被同一个包内的类访问，这是和C++中的 friendly 修饰符代表的权限相同(但是在java中没有friendly这个访问权限修饰符)。

针对每种访问权限修饰的变量，方法和类 的权限限定如下：

类： public，默认
变量和方法：public，protected，默认，private

public:  可以被   任何地方的别的类   访问
protected：可以被同一个package的类    和    该类的子类  访问
默认：只可以被    同一个包内的类    访问
private：只可以被自己访问
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜


Maven
MVN source:jar
MAVEN就是一个可集成共享的java项目依赖管理
安装maven之后在~/.m2下面：
repository:
这里面放本地的一些仓库，包括自己所建的maven项目生成的, 以及在IDEA中构建项目下载的一些仓库。
同时我们可以在setting.xml里面添加公司内部的一些mirrors文件，　这里仓库在公司内部。。当然下载起来比较快？
当然我们也可以将自己生成的仓库上传到公司集中的maven内部集中区（需要权限?

mvn package -DskipTests

｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜
抽象类与接口：
http://www.cnblogs.com/dolphin0520/p/3811437.html
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜


｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜
Http长连接与短连接：
http://www.cnblogs.com/cswuyg/p/3653263.html
｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜｜


关于java中的synchronized
http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html
java默认构造函数:
http://www.cnblogs.com/findumars/p/3247275.html
Hashtable继承自Dictionary类，而HashMap继承自AbstractMap类。但二者都实现了Map接口。
关于hashmap hashtable等总结:
http://blog.csdn.net/kingzone_2008/article/details/8179701
关于java静态方法　静态类:
http://blog.csdn.net/zhandoushi1982/article/details/8453522/


java LinkedHashMap:
http://zhangshixi.iteye.com/blog/673789


Mybatis的简单介绍：
http://baike.baidu.com/link?url=P7glCP3FHBXcQfMaCyg0s9vuuvnkjjz-JupS4Vv4h94KiqBgPJHgm5x1UBAmZ8_N4ooXqUG0X5kGgMt5_21mBK

Mybatis配置mapper
http://elim.iteye.com/blog/1841033

thrift相关:
http://www.aboutyun.com/thread-7139-1-1.html
http://itindex.net/detail/46937-thrift-%E5%8E%9F%E7%90%86-java
http://houjixin.blog.163.com/blog/static/35628410201501654039437/

抽象类实现接口:
http://blog.csdn.net/youyedemeng/article/details/7109754

Mybatis是类似hibernate的一个ORM模型，
h2是内存数据库
mybatis可以选择对mysql或者h2操作, 可以在mybatis-config.xml中进行配置，　然后在secret.properties中设置当前数据库的工作环境(仅针对workflow)

新建一个mysql的用户， 以及将某个数据库的权限赋给他:
grant all on workflowdb.* to workflow@localhost identified by 123456;
source /path/*.sql;


Cron的规则解析:
http://blog.csdn.net/foamflower/article/details/4260645

Thrift与http通信的差异:
大部分业务不需要从前端发起，只在后端的模块之间进行数据通信的话，推荐用RPC（thrift），开销相对比较小
然而thrift的问题在于比较难实现双向通信
